{
  "language": "Solidity",
  "sources": {
    "contracts/DepositRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./interfaces/IERC20EIP3009.sol\";\nimport \"./interfaces/IRootChainManager.sol\";\n\ncontract DepositRouter {\n    IRootChainManager public rootChainManager;\n    IERC20EIP3009 public rootToken;\n    address public predicateContract;\n\n    constructor(\n        IERC20EIP3009 _rootToken,\n        IRootChainManager _rootChainManager,\n        address _predicateContract\n    ) {\n        rootToken = _rootToken;\n        rootChainManager = _rootChainManager;\n        predicateContract = _predicateContract;\n\n        // hit predicateContract with that max approval\n        rootToken.approve(predicateContract, type(uint).max);\n    }\n\n    function deposit(\n        address from,\n        address depositRecipient,\n        uint256 value,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        rootToken.receiveWithAuthorization(\n            from,\n            address(this),\n            value,\n            0,\n            validBefore,\n            nonce,\n            v,\n            r,\n            s\n        );\n\n        rootChainManager.depositFor(\n            depositRecipient,\n            address(rootToken),\n            abi.encode(value)\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IERC20EIP3009.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IERC20EIP3009 {\n    function receiveWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IRootChainManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IRootChainManager {\n    function depositFor(\n        address user,\n        address rootToken,\n        bytes calldata depositData\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}