{
  "address": "0xf4b00848faD26b842acaf4F6f99E5735b2541007",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20WithEIP3009",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "contract IRootChainManager",
          "name": "_rootChainManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_predicateContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DepositRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DeregisterRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "RegisterRelay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relay",
          "type": "address"
        }
      ],
      "name": "adminDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relay",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxBlock",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DepositRouter.Sig",
          "name": "receiveSig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DepositRouter.Sig",
          "name": "depositSig",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayersWithUrls",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "relayerInfo",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maybeRelay",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predicateContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayerUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootChainManager",
      "outputs": [
        {
          "internalType": "contract IRootChainManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "contract IERC20WithEIP3009",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "setRelayerUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relay",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde52f51702c0a988ae103fc986e2e689fd880993edb2ddfac32a55d2fcb00505",
  "receipt": {
    "to": null,
    "from": "0x1C35E441b21E528Dd8385Fd41d1578bE18E247D3",
    "contractAddress": "0xf4b00848faD26b842acaf4F6f99E5735b2541007",
    "transactionIndex": 1,
    "gasUsed": "2092621",
    "logsBloom": "0x00000000000000000000000000008000000000000000000000800000000000000000800000000000000000000000000000000000000004000080000000a00000000000000000000000000000000000000001000000000000000000000000000000400000020000000000000000000800000000000000000000000000000000401000000000000000001000000000000000000000000000000000000000000000020000400000000000000000100000000000000000000400000000004000000000000000000004000000000000000000000000000000000000000000000020000010000000000100000000000000000000000000010000000000000000000000",
    "blockHash": "0x16b1444a23f69f4586ff2c040ff66ca1764c4df103e78f18011f0c6e74f630bb",
    "transactionHash": "0xde52f51702c0a988ae103fc986e2e689fd880993edb2ddfac32a55d2fcb00505",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5291848,
        "transactionHash": "0xde52f51702c0a988ae103fc986e2e689fd880993edb2ddfac32a55d2fcb00505",
        "address": "0xf4b00848faD26b842acaf4F6f99E5735b2541007",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x16b1444a23f69f4586ff2c040ff66ca1764c4df103e78f18011f0c6e74f630bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5291848,
        "transactionHash": "0xde52f51702c0a988ae103fc986e2e689fd880993edb2ddfac32a55d2fcb00505",
        "address": "0x6847E4fa1EE2Af7e2E62793CBdf4E39957c71C50",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f4b00848fad26b842acaf4f6f99e5735b2541007",
          "0x000000000000000000000000dd6596f2029e6233deffaca316e6a95217d4dc34"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x16b1444a23f69f4586ff2c040ff66ca1764c4df103e78f18011f0c6e74f630bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5291848,
        "transactionHash": "0xde52f51702c0a988ae103fc986e2e689fd880993edb2ddfac32a55d2fcb00505",
        "address": "0xf4b00848faD26b842acaf4F6f99E5735b2541007",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x16b1444a23f69f4586ff2c040ff66ca1764c4df103e78f18011f0c6e74f630bb"
      }
    ],
    "blockNumber": 5291848,
    "cumulativeGasUsed": "2113621",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6847E4fa1EE2Af7e2E62793CBdf4E39957c71C50",
    "0xBbD7cBFA79faee899Eaf900F13C9065bF03B1A74",
    "0xdD6596F2029e6233DEFfaCa316e6A95217d4Dc34",
    "0x1C35E441b21E528Dd8385Fd41d1578bE18E247D3",
    "10000000000000000"
  ],
  "solcInputHash": "deb4b2b672674d71ab39294dc868238d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20WithEIP3009\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"contract IRootChainManager\",\"name\":\"_rootChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_predicateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DepositRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DeregisterRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"RegisterRelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"adminDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct DepositRouter.Sig\",\"name\":\"receiveSig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct DepositRouter.Sig\",\"name\":\"depositSig\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayersWithUrls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"relayerInfo\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeRelay\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predicateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayerUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"contract IRootChainManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"contract IERC20WithEIP3009\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setRelayerUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,address,uint256,uint256,uint256,bytes32,uint256,(uint8,bytes32,bytes32),(uint8,bytes32,bytes32))\":{\"details\":\"deposit funds to Matic. Since this is expected to be called in a meta transaction and `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract and then `depositFor` on this contract to the `depositRecipient` on matic. Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.\",\"params\":{\"depositRecipient\":\"- the address to receive the deposit on matic\",\"depositSig\":\"- the EIP712 signature for the deposit\",\"fee\":\"- the fee to pay for gas.\",\"from\":\"- the address executing the deposit\",\"maxBlock\":\"- the maximum block that the deposit can be included in to prevent relayers      from waiting until transaction fee decreases to submit the transaction\",\"nonce\":\"- a unique random nonce for receiveWithAuthorization (NOT a sequential nonce see      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)\",\"receiveSig\":\"- the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`\",\"totalValue\":\"- the amount to deposit\",\"validBefore\":\"- the deadline for executing the deposit\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositRouter.sol\":\"DepositRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/DepositRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IERC20WithEIP3009.sol\\\";\\nimport \\\"./interfaces/IRootChainManager.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\ncontract DepositRouter is Ownable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* EVENTS */\\n    event RegisterRelay(address indexed relay, string url);\\n\\n    // sender is the account that called the function\\n    event DeregisterRelay(address indexed relay, address sender);\\n    event DepositRelayed(address indexed relayer, address indexed depositor, uint256 amount, uint256 fee);\\n\\n    /* EXTERNAL CONTRACTS */\\n\\n    IRootChainManager public rootChainManager;\\n    IERC20WithEIP3009 public rootToken;\\n    address public predicateContract;\\n\\n    /* RELAYER INFO */\\n\\n    // collected fees for each relayer\\n    mapping(address => uint256) public collectedFees;\\n\\n    // stake required to become a relayer\\n    uint256 public stakeAmount;\\n\\n    EnumerableSet.AddressSet private _relayers;\\n\\n    mapping(address => string) public relayerUrl;\\n\\n    // because stake amount can be changed by owner we need to track how much each staked\\n    mapping(address => uint256) public relayerStake;\\n\\n    mapping(address => bool) public blacklisted;\\n\\n    /* EIP712 */\\n\\n    mapping(address => uint256) public depositNonces;\\n\\n    bytes32 public domainSeparator;\\n\\n    // The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    // The EIP-712 typehash for the deposit id struct\\n    bytes32 public constant DEPOSIT_TYPEHASH = keccak256(\\n        \\\"Deposit(address relayer,address depositRecipient,uint256 fee,uint256 maxBlock,uint256 nonce)\\\"\\n    );\\n\\n    string public constant NAME = \\\"Polymarket Deposit Router\\\";\\n\\n    /* STRUCTS */\\n\\n    struct Sig {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /* CONSTRUCTOR */\\n\\n    constructor(\\n        IERC20WithEIP3009 _rootToken,\\n        IRootChainManager _rootChainManager,\\n        address _predicateContract,\\n        address owner,\\n        uint256 _stakeAmount\\n    ) {\\n        rootToken = _rootToken;\\n        rootChainManager = _rootChainManager;\\n        predicateContract = _predicateContract;\\n\\n        // hit predicateContract with a max approval\\n        rootToken.approve(predicateContract, type(uint256).max);\\n\\n        stakeAmount = _stakeAmount;\\n\\n        transferOwnership(owner);\\n\\n        domainSeparator = keccak256(abi.encode(\\n            DOMAIN_TYPEHASH,\\n            keccak256(bytes(NAME)),\\n            _getChainIdInternal(),\\n            address(this)\\n        ));\\n    }\\n\\n    /* VIEW FUNCTIONS */\\n\\n    function getRelayers() public view returns (address[] memory) {\\n        return _relayers.values();\\n    }\\n\\n    function getRelayersWithUrls() external view returns (bytes[] memory relayerInfo) {\\n        uint256 length = _relayers.length();\\n        relayerInfo = new bytes[](length);\\n\\n        for (uint i = 0; i < length; i++) {\\n            address relayer = _relayers.at(i);\\n\\n            relayerInfo[i] = abi.encode(relayer, relayerUrl[relayer]);\\n        }\\n    }\\n\\n    function isRegistered(address maybeRelay) external view returns (bool) {\\n        return _relayers.contains(maybeRelay);\\n    }\\n\\n    /* ADMIN FUNCTIONS */\\n\\n    function setStakeAmount(uint256 newAmount) external onlyOwner {\\n        stakeAmount = newAmount;\\n    }\\n\\n    function adminDeregister(address relay) external onlyOwner {\\n        _blacklist(relay);\\n        _deregister(relay);\\n    }\\n\\n    function blacklist(address relay) external onlyOwner {\\n        _blacklist(relay);\\n    }\\n\\n    function unBlacklist(address relay) external onlyOwner {\\n        blacklisted[relay] = false;\\n    }\\n\\n    /* RELAYER FUNCTIONS */\\n\\n    function register(string calldata url) external payable nonReentrant {\\n        require(!blacklisted[msg.sender], \\\"DepositRouter::register: relay has been blacklisted\\\");\\n        require(!_relayers.contains(msg.sender), \\\"DepositRouter::register: relay already registered\\\");\\n        require(msg.value >= stakeAmount, \\\"DepositRouter:register: insufficient stake amount\\\");\\n\\n        relayerStake[msg.sender] += stakeAmount;\\n        _relayers.add(msg.sender);\\n        relayerUrl[msg.sender] = url;\\n\\n        // refund dust eth if any\\n        if (msg.value > stakeAmount) {\\n            (bool success, ) = msg.sender.call{ value: msg.value - stakeAmount }(\\\"\\\");\\n            require(success, \\\"DepositRouter:register: refund failed.\\\");\\n        }\\n\\n        emit RegisterRelay(msg.sender, url);\\n    }\\n\\n    function setRelayerUrl(string calldata url) external {\\n        require(_relayers.contains(msg.sender), \\\"DepositRouter::setRelayerUrl: relay must be registered to change its url\\\");\\n\\n        relayerUrl[msg.sender] = url;\\n    }\\n\\n    function deregister() external {\\n        _deregister(msg.sender);\\n    }\\n\\n    function claimFees(address to, uint256 amount) external {\\n        require(collectedFees[msg.sender] >= amount, \\\"DepositRouter::claimFees: cannot claim more fees than the accout has\\\");\\n\\n        unchecked {\\n            collectedFees[msg.sender] -= amount;\\n        }\\n\\n        rootToken.transfer(to, amount);\\n    }\\n\\n    /* DEPOSIT INTO MATIC */\\n\\n    /**\\n     * @dev deposit funds to Matic. Since this is expected to be called in a meta transaction and\\n     * `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract\\n     * and then `depositFor` on this contract to the `depositRecipient` on matic.\\n     * Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.\\n     *\\n     * @param from - the address executing the deposit\\n     * @param depositRecipient - the address to receive the deposit on matic\\n     * @param totalValue - the amount to deposit\\n     * @param fee - the fee to pay for gas.\\n     * @param validBefore - the deadline for executing the deposit\\n     * @param nonce - a unique random nonce for receiveWithAuthorization (NOT a sequential nonce see\\n     *      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)\\n     * @param maxBlock - the maximum block that the deposit can be included in to prevent relayers\\n     *      from waiting until transaction fee decreases to submit the transaction\\n     * @param receiveSig - the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`\\n     * @param depositSig - the EIP712 signature for the deposit\\n     */\\n    function deposit(\\n        address from,\\n        address depositRecipient,\\n        uint256 totalValue,\\n        uint256 fee,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint256 maxBlock,\\n        Sig calldata receiveSig,\\n        Sig calldata depositSig\\n    ) external {\\n        // require relayer is registered\\n        require(_relayers.contains(msg.sender), \\\"DepositRouter::deposit: relayer is not registered\\\");\\n        require(block.number <= maxBlock, \\\"DepositRouter::deposit: cannot relay transaction after max block\\\");\\n\\n        // verify the user has agreed to the deposit\\n        _verifyDepositSig(from, depositRecipient, fee, maxBlock, depositSig);\\n\\n        /**\\n         * receiveWithAuthorization rather than transferWithAuthorization to prevent front-running\\n         * attack where someone takes a transferWithAuthorization signature before the transaction has been mined\\n         * and executes the transfer so that this depositCall would fail and the funds would be stuck in\\n         * this contract.\\n         */\\n        rootToken.receiveWithAuthorization(\\n            from,\\n            address(this),\\n            totalValue,\\n            0,\\n            validBefore,\\n            nonce,\\n            receiveSig.v,\\n            receiveSig.r,\\n            receiveSig.s\\n        );\\n\\n        uint256 depositAmount = totalValue - fee; // will revert on underflow\\n\\n        rootChainManager.depositFor(\\n            depositRecipient,\\n            address(rootToken),\\n            abi.encode(depositAmount) \\n        );\\n\\n        collectedFees[msg.sender] += fee;\\n\\n        emit DepositRelayed(msg.sender, from, depositAmount, fee);\\n    }\\n\\n    /* INTERNAL FUNCTIONS */\\n\\n    function _deregister(address relay) internal nonReentrant {\\n        require(_relayers.contains(relay), \\\"DepositRouter::deregister: relay is not already registered\\\");\\n\\n        uint256 previousStake = relayerStake[relay];\\n\\n        relayerStake[relay] = 0;\\n        _relayers.remove(relay);\\n        delete relayerUrl[relay];\\n\\n        (bool success, ) = relay.call{ value: previousStake }(\\\"\\\");\\n        require(success, \\\"DepositRouter::deregister: refund stake failed\\\");\\n\\n        emit DeregisterRelay(relay, msg.sender);\\n    }\\n\\n    function _getChainIdInternal() internal view returns (uint) {\\n        uint chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    function _verifyDepositSig(address from, address depositRecipient, uint256 fee, uint256 maxBlock, Sig calldata sig) internal {\\n        bytes32 structHash = keccak256(abi.encode(DEPOSIT_TYPEHASH, msg.sender, depositRecipient, fee, maxBlock, depositNonces[from]++));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        \\n        require(from == ECDSA.recover(digest, sig.v, sig.r, sig.s), \\\"DepositRouter::_verifyDepositSig: unable to verify deposit sig\\\");\\n    }\\n\\n    function _blacklist(address relay) internal {\\n        blacklisted[relay] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xace530127be0ce0a205a1343dbcd2b4084f3d98229d68fafe86941b94e2d5123\",\"license\":\"MIT\"},\"contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * contract copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f88e5552342c9f9afc8ec76f833e281ca748b960/contracts/utils/structs/EnumerableSet.sol\\n * because it has the values() function and the latest package in npm does not\\n *\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x281fd24deb19a73cd202679572dfe7ae1bffee27f0fd26120058601a34a51db0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20WithEIP3009.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC20WithEIP3009 {\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x82bbef851c905c5d85744b8b5aed52d7970d3afd136d7c937d970c564bbeefe7\",\"license\":\"MIT\"},\"contracts/interfaces/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IRootChainManager {\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x33ef5dc1d324ef5cbd8a25219eef5e2daa1ee72fc39c6ad5102c4bde24cc21e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024d4380380620024d483398101604081905262000034916200030c565b6200003f33620001be565b60018055600380546001600160a01b038781166001600160a01b031992831681179093556002805488831690841617905560048054918716919092168117825560405163095ea7b360e01b815291820152600019602482015263095ea7b390604401602060405180830381600087803b158015620000bc57600080fd5b505af1158015620000d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f79190620002e3565b50600681905562000108826200020e565b5050604080518082018252601981527f506f6c796d61726b6574204465706f73697420526f757465720000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f0e1f681f0204effccee965e5545acd3aea2ecccaed49392914c1601d547080d681840152466060820152306080808301919091528351808303909101815260a09091019092528151910120600d555062000395915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200026e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000265565b620002e081620001be565b50565b600060208284031215620002f5578081fd5b8151801515811462000305578182fd5b9392505050565b600080600080600060a0868803121562000324578081fd5b855162000331816200037f565b602087015190955062000344816200037f565b604087015190945062000357816200037f565b60608701519093506200036a816200037f565b80925050608086015190509295509295909350565b6001600160a01b0381168114620002e057600080fd5b61212f80620003a56000396000f3fe6080604052600436106101b75760003560e01c806392d76895116100ec578063ed062b2c1161008a578063f2fde38b11610064578063f2fde38b1461055a578063f698da251461057a578063f961ade314610590578063f9f92be4146105bd57600080fd5b8063ed062b2c14610505578063ef7b8bf814610527578063f2c298be1461054757600080fd5b8063bd07018d116100c6578063bd07018d14610465578063be09b8b514610485578063c3c5a547146104a5578063dbac26e9146104d557600080fd5b806392d76895146103cd578063a3f4df7e146103fa578063aff5edb11461045057600080fd5b806348825e941161015957806360c7dc471161013357806360c7dc47146103645780636412932b1461037a578063715018a61461039a5780638da5cb5b146103af57600080fd5b806348825e94146102f057806357e6a5b6146103245780635c46ff991461034457600080fd5b80631cead9a7116101955780631cead9a7146102415780631f2d00651461027c57806320606b701461029c57806343808c50146102d057600080fd5b8063179ff4b2146101bc57806319860e03146101e75780631a8952661461021f575b600080fd5b3480156101c857600080fd5b506101d16105dd565b6040516101de9190611f74565b60405180910390f35b3480156101f357600080fd5b50600454610207906001600160a01b031681565b6040516001600160a01b0390911681526020016101de565b34801561022b57600080fd5b5061023f61023a366004611cb6565b6105ee565b005b34801561024d57600080fd5b5061026e61025c366004611cb6565b60056020526000908152604090205481565b6040519081526020016101de565b34801561028857600080fd5b50600354610207906001600160a01b031681565b3480156102a857600080fd5b5061026e7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b3480156102dc57600080fd5b5061023f6102eb366004611e0c565b61066e565b3480156102fc57600080fd5b5061026e7f990b6e436815e63cad01cb5170034992c7c2c7fdf40c094dcbcff7d9fa1e87ef81565b34801561033057600080fd5b5061023f61033f366004611cd0565b6106cd565b34801561035057600080fd5b5061023f61035f366004611d56565b6109ce565b34801561037057600080fd5b5061026e60065481565b34801561038657600080fd5b5061023f610395366004611d9f565b610b35565b3480156103a657600080fd5b5061023f610bf7565b3480156103bb57600080fd5b506000546001600160a01b0316610207565b3480156103d957600080fd5b5061026e6103e8366004611cb6565b600a6020526000908152604090205481565b34801561040657600080fd5b506104436040518060400160405280601981526020017f506f6c796d61726b6574204465706f73697420526f757465720000000000000081525081565b6040516101de9190612051565b34801561045c57600080fd5b5061023f610c5d565b34801561047157600080fd5b50600254610207906001600160a01b031681565b34801561049157600080fd5b5061023f6104a0366004611cb6565b610c66565b3480156104b157600080fd5b506104c56104c0366004611cb6565b610cf4565b60405190151581526020016101de565b3480156104e157600080fd5b506104c56104f0366004611cb6565b600b6020526000908152604090205460ff1681565b34801561051157600080fd5b5061051a610d16565b6040516101de9190611fc1565b34801561053357600080fd5b50610443610542366004611cb6565b610e1c565b61023f610555366004611d9f565b610eb6565b34801561056657600080fd5b5061023f610575366004611cb6565b6111ff565b34801561058657600080fd5b5061026e600d5481565b34801561059c57600080fd5b5061026e6105ab366004611cb6565b600c6020526000908152604090205481565b3480156105c957600080fd5b5061023f6105d8366004611cb6565b6112de565b60606105e96007611360565b905090565b6000546001600160a01b0316331461064d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03166000908152600b60205260409020805460ff19169055565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b600655565b3360009081526008602052604090205461074f5760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a3a6465706f7369743a2072656c617965722060448201527f6973206e6f7420726567697374657265640000000000000000000000000000006064820152608401610644565b824311156107c7576040805162461bcd60e51b81526020600482015260248101919091527f4465706f736974526f757465723a3a6465706f7369743a2063616e6e6f74207260448201527f656c6179207472616e73616374696f6e206166746572206d617820626c6f636b6064820152608401610644565b6107d48989888685611374565b6003546001600160a01b031663ef55bec68a308a60008a8a6107f960208b018b611e24565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b1681526001600160a01b03988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260ff1660c4830152602086013560e483015285013561010482015261012401600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b50505050600086886108b8919061207c565b60025460035460408051602080820186905282518083039091018152818301928390527fe3dec8fb000000000000000000000000000000000000000000000000000000009092529394506001600160a01b039283169363e3dec8fb93610925938f93911691604401611e90565b600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b505033600090815260056020526040812080548b9450909250610977908490612064565b909155505060408051828152602081018990526001600160a01b038c169133917fe017ffcfad08938f084f69e5f6c902c71f014a4e966d961d3a2d21c4b23e28ee910160405180910390a350505050505050505050565b33600090815260056020526040902054811115610a7a5760405162461bcd60e51b8152602060048201526044602482018190527f4465706f736974526f757465723a3a636c61696d466565733a2063616e6e6f74908201527f20636c61696d206d6f72652066656573207468616e20746865206163636f757460648201527f2068617300000000000000000000000000000000000000000000000000000000608482015260a401610644565b33600090815260056020526040908190208054839003905560035490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611d7f565b505050565b33600090815260086020526040902054610bdd5760405162461bcd60e51b815260206004820152604860248201527f4465706f736974526f757465723a3a73657452656c6179657255726c3a20726560448201527f6c6179206d757374206265207265676973746572656420746f206368616e676560648201527f206974732075726c000000000000000000000000000000000000000000000000608482015260a401610644565b336000908152600960205260409020610b30908383611bb4565b6000546001600160a01b03163314610c515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610c5b6000611526565b565b610c5b3361158e565b6000546001600160a01b03163314610cc05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610ce8816001600160a01b03166000908152600b60205260409020805460ff19166001179055565b610cf18161158e565b50565b6001600160a01b03811660009081526008602052604081205415155b92915050565b60606000610d2460076117cb565b90508067ffffffffffffffff811115610d4d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d8057816020015b6060815260200190600190039081610d6b5790505b50915060005b81811015610e17576000610d9b6007836117d5565b6001600160a01b0381166000908152600960209081526040918290209151929350610dc99284929101611ebc565b604051602081830303815290604052848381518110610df857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080610e0f906120c8565b915050610d86565b505090565b60096020526000908152604090208054610e3590612093565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6190612093565b8015610eae5780601f10610e8357610100808354040283529160200191610eae565b820191906000526020600020905b815481529060010190602001808311610e9157829003601f168201915b505050505081565b60026001541415610f095760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610644565b6002600155336000908152600b602052604090205460ff1615610f945760405162461bcd60e51b815260206004820152603360248201527f4465706f736974526f757465723a3a72656769737465723a2072656c6179206860448201527f6173206265656e20626c61636b6c6973746564000000000000000000000000006064820152608401610644565b33600090815260086020526040902054156110175760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a3a72656769737465723a2072656c6179206160448201527f6c726561647920726567697374657265640000000000000000000000000000006064820152608401610644565b60065434101561108f5760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a72656769737465723a20696e73756666696360448201527f69656e74207374616b6520616d6f756e740000000000000000000000000000006064820152608401610644565b600654336000908152600a6020526040812080549091906110b1908490612064565b909155506110c290506007336117e1565b503360009081526009602052604090206110dd908383611bb4565b506006543411156111b45760065460009033906110fa903461207c565b604051600081818185875af1925050503d8060008114611136576040519150601f19603f3d011682016040523d82523d6000602084013e61113b565b606091505b50509050806111b25760405162461bcd60e51b815260206004820152602660248201527f4465706f736974526f757465723a72656769737465723a20726566756e64206660448201527f61696c65642e00000000000000000000000000000000000000000000000000006064820152608401610644565b505b336001600160a01b03167fb16283b75da46a2ae7a2aeda9af8df5483014d215c16d77175f2d196255ae7b683836040516111ef929190612022565b60405180910390a2505060018055565b6000546001600160a01b031633146112595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b6001600160a01b0381166112d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610644565b610cf181611526565b6000546001600160a01b031633146113385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610cf1816001600160a01b03166000908152600b60205260409020805460ff19166001179055565b6060600061136d836117f6565b9392505050565b6001600160a01b0385166000908152600c6020526040812080547f990b6e436815e63cad01cb5170034992c7c2c7fdf40c094dcbcff7d9fa1e87ef913391889188918891876113c2836120c8565b909155506040805160208101979097526001600160a01b0395861690870152939092166060850152608084015260a083015260c082015260e0016040516020818303038152906040528051906020012090506000600d548260405160200161145c9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181529190528051602091820120915061149790829061148890860186611e24565b85602001358660400135611852565b6001600160a01b0316876001600160a01b03161461151d5760405162461bcd60e51b815260206004820152603e60248201527f4465706f736974526f757465723a3a5f7665726966794465706f73697453696760448201527f3a20756e61626c6520746f20766572696679206465706f7369742073696700006064820152608401610644565b50505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015414156115e15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610644565b60026001556001600160a01b0381166000908152600860205260409020546116715760405162461bcd60e51b815260206004820152603a60248201527f4465706f736974526f757465723a3a646572656769737465723a2072656c617960448201527f206973206e6f7420616c726561647920726567697374657265640000000000006064820152608401610644565b6001600160a01b0381166000908152600a6020526040812080549190556116996007836119fb565b506001600160a01b03821660009081526009602052604081206116bb91611c38565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611708576040519150601f19603f3d011682016040523d82523d6000602084013e61170d565b606091505b50509050806117845760405162461bcd60e51b815260206004820152602e60248201527f4465706f736974526f757465723a3a646572656769737465723a20726566756e60448201527f64207374616b65206661696c65640000000000000000000000000000000000006064820152608401610644565b6040513381526001600160a01b038416907f9713c9d5d29d52252ce91902b2eb466a55ebf1ee7e962795abca74391e6445369060200160405180910390a250506001805550565b6000610d10825490565b600061136d8383611a10565b600061136d836001600160a01b038416611a48565b60608160000180548060200260200160405190810160405280929190818152602001828054801561184657602002820191906000526020600020905b815481526020019060010190808311611832575b50505050509050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156118cf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610644565b8360ff16601b14806118e457508360ff16601c145b61193b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610644565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561198f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119f25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610644565b95945050505050565b600061136d836001600160a01b038416611a97565b6000826000018281548110611a3557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000818152600183016020526040812054611a8f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d10565b506000610d10565b60008181526001830160205260408120548015611baa576000611abb60018361207c565b8554909150600090611acf9060019061207c565b9050818114611b50576000866000018281548110611afd57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611b2e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b6f57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d10565b6000915050610d10565b828054611bc090612093565b90600052602060002090601f016020900481019282611be25760008555611c28565b82601f10611bfb5782800160ff19823516178555611c28565b82800160010185558215611c28579182015b82811115611c28578235825591602001919060010190611c0d565b50611c34929150611c6e565b5090565b508054611c4490612093565b6000825580601f10611c54575050565b601f016020900490600052602060002090810190610cf191905b5b80821115611c345760008155600101611c6f565b80356001600160a01b0381168114611c9a57600080fd5b919050565b600060608284031215611cb0578081fd5b50919050565b600060208284031215611cc7578081fd5b61136d82611c83565b60008060008060008060008060006101a08a8c031215611cee578485fd5b611cf78a611c83565b9850611d0560208b01611c83565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a01359250611d378b60e08c01611c9f565b9150611d478b6101408c01611c9f565b90509295985092959850929598565b60008060408385031215611d68578182fd5b611d7183611c83565b946020939093013593505050565b600060208284031215611d90578081fd5b8151801515811461136d578182fd5b60008060208385031215611db1578182fd5b823567ffffffffffffffff80821115611dc8578384fd5b818501915085601f830112611ddb578384fd5b813581811115611de9578485fd5b866020828501011115611dfa578485fd5b60209290920196919550909350505050565b600060208284031215611e1d578081fd5b5035919050565b600060208284031215611e35578081fd5b813560ff8116811461136d578182fd5b60008151808452815b81811015611e6a57602081850181015186830182015201611e4e565b81811115611e7b5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b038086168352808516602084015250606060408301526119f26060830184611e45565b6001600160a01b03831681526000602060408184015281845483600182811c915080831680611eec57607f831692505b858310811415611f0a57634e487b7160e01b87526022600452602487fd5b6040880183905260608801818015611f295760018114611f3a57611f64565b60ff19861682528782019650611f64565b60008b815260209020895b86811015611f5e57815484820152908501908901611f45565b83019750505b50949a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611fb55783516001600160a01b031683529284019291840191600101611f90565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561201557603f19888603018452612003858351611e45565b94509285019290850190600101611fe7565b5092979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061136d6020830184611e45565b60008219821115612077576120776120e3565b500190565b60008282101561208e5761208e6120e3565b500390565b600181811c908216806120a757607f821691505b60208210811415611cb057634e487b7160e01b600052602260045260246000fd5b60006000198214156120dc576120dc6120e3565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122097dce6e406aa95390e46760683c343f91d7bbf86caf2c8f18f4be1589c9a822064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c806392d76895116100ec578063ed062b2c1161008a578063f2fde38b11610064578063f2fde38b1461055a578063f698da251461057a578063f961ade314610590578063f9f92be4146105bd57600080fd5b8063ed062b2c14610505578063ef7b8bf814610527578063f2c298be1461054757600080fd5b8063bd07018d116100c6578063bd07018d14610465578063be09b8b514610485578063c3c5a547146104a5578063dbac26e9146104d557600080fd5b806392d76895146103cd578063a3f4df7e146103fa578063aff5edb11461045057600080fd5b806348825e941161015957806360c7dc471161013357806360c7dc47146103645780636412932b1461037a578063715018a61461039a5780638da5cb5b146103af57600080fd5b806348825e94146102f057806357e6a5b6146103245780635c46ff991461034457600080fd5b80631cead9a7116101955780631cead9a7146102415780631f2d00651461027c57806320606b701461029c57806343808c50146102d057600080fd5b8063179ff4b2146101bc57806319860e03146101e75780631a8952661461021f575b600080fd5b3480156101c857600080fd5b506101d16105dd565b6040516101de9190611f74565b60405180910390f35b3480156101f357600080fd5b50600454610207906001600160a01b031681565b6040516001600160a01b0390911681526020016101de565b34801561022b57600080fd5b5061023f61023a366004611cb6565b6105ee565b005b34801561024d57600080fd5b5061026e61025c366004611cb6565b60056020526000908152604090205481565b6040519081526020016101de565b34801561028857600080fd5b50600354610207906001600160a01b031681565b3480156102a857600080fd5b5061026e7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b3480156102dc57600080fd5b5061023f6102eb366004611e0c565b61066e565b3480156102fc57600080fd5b5061026e7f990b6e436815e63cad01cb5170034992c7c2c7fdf40c094dcbcff7d9fa1e87ef81565b34801561033057600080fd5b5061023f61033f366004611cd0565b6106cd565b34801561035057600080fd5b5061023f61035f366004611d56565b6109ce565b34801561037057600080fd5b5061026e60065481565b34801561038657600080fd5b5061023f610395366004611d9f565b610b35565b3480156103a657600080fd5b5061023f610bf7565b3480156103bb57600080fd5b506000546001600160a01b0316610207565b3480156103d957600080fd5b5061026e6103e8366004611cb6565b600a6020526000908152604090205481565b34801561040657600080fd5b506104436040518060400160405280601981526020017f506f6c796d61726b6574204465706f73697420526f757465720000000000000081525081565b6040516101de9190612051565b34801561045c57600080fd5b5061023f610c5d565b34801561047157600080fd5b50600254610207906001600160a01b031681565b34801561049157600080fd5b5061023f6104a0366004611cb6565b610c66565b3480156104b157600080fd5b506104c56104c0366004611cb6565b610cf4565b60405190151581526020016101de565b3480156104e157600080fd5b506104c56104f0366004611cb6565b600b6020526000908152604090205460ff1681565b34801561051157600080fd5b5061051a610d16565b6040516101de9190611fc1565b34801561053357600080fd5b50610443610542366004611cb6565b610e1c565b61023f610555366004611d9f565b610eb6565b34801561056657600080fd5b5061023f610575366004611cb6565b6111ff565b34801561058657600080fd5b5061026e600d5481565b34801561059c57600080fd5b5061026e6105ab366004611cb6565b600c6020526000908152604090205481565b3480156105c957600080fd5b5061023f6105d8366004611cb6565b6112de565b60606105e96007611360565b905090565b6000546001600160a01b0316331461064d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03166000908152600b60205260409020805460ff19169055565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b600655565b3360009081526008602052604090205461074f5760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a3a6465706f7369743a2072656c617965722060448201527f6973206e6f7420726567697374657265640000000000000000000000000000006064820152608401610644565b824311156107c7576040805162461bcd60e51b81526020600482015260248101919091527f4465706f736974526f757465723a3a6465706f7369743a2063616e6e6f74207260448201527f656c6179207472616e73616374696f6e206166746572206d617820626c6f636b6064820152608401610644565b6107d48989888685611374565b6003546001600160a01b031663ef55bec68a308a60008a8a6107f960208b018b611e24565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b1681526001600160a01b03988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260ff1660c4830152602086013560e483015285013561010482015261012401600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b50505050600086886108b8919061207c565b60025460035460408051602080820186905282518083039091018152818301928390527fe3dec8fb000000000000000000000000000000000000000000000000000000009092529394506001600160a01b039283169363e3dec8fb93610925938f93911691604401611e90565b600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b505033600090815260056020526040812080548b9450909250610977908490612064565b909155505060408051828152602081018990526001600160a01b038c169133917fe017ffcfad08938f084f69e5f6c902c71f014a4e966d961d3a2d21c4b23e28ee910160405180910390a350505050505050505050565b33600090815260056020526040902054811115610a7a5760405162461bcd60e51b8152602060048201526044602482018190527f4465706f736974526f757465723a3a636c61696d466565733a2063616e6e6f74908201527f20636c61696d206d6f72652066656573207468616e20746865206163636f757460648201527f2068617300000000000000000000000000000000000000000000000000000000608482015260a401610644565b33600090815260056020526040908190208054839003905560035490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611d7f565b505050565b33600090815260086020526040902054610bdd5760405162461bcd60e51b815260206004820152604860248201527f4465706f736974526f757465723a3a73657452656c6179657255726c3a20726560448201527f6c6179206d757374206265207265676973746572656420746f206368616e676560648201527f206974732075726c000000000000000000000000000000000000000000000000608482015260a401610644565b336000908152600960205260409020610b30908383611bb4565b6000546001600160a01b03163314610c515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610c5b6000611526565b565b610c5b3361158e565b6000546001600160a01b03163314610cc05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610ce8816001600160a01b03166000908152600b60205260409020805460ff19166001179055565b610cf18161158e565b50565b6001600160a01b03811660009081526008602052604081205415155b92915050565b60606000610d2460076117cb565b90508067ffffffffffffffff811115610d4d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d8057816020015b6060815260200190600190039081610d6b5790505b50915060005b81811015610e17576000610d9b6007836117d5565b6001600160a01b0381166000908152600960209081526040918290209151929350610dc99284929101611ebc565b604051602081830303815290604052848381518110610df857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080610e0f906120c8565b915050610d86565b505090565b60096020526000908152604090208054610e3590612093565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6190612093565b8015610eae5780601f10610e8357610100808354040283529160200191610eae565b820191906000526020600020905b815481529060010190602001808311610e9157829003601f168201915b505050505081565b60026001541415610f095760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610644565b6002600155336000908152600b602052604090205460ff1615610f945760405162461bcd60e51b815260206004820152603360248201527f4465706f736974526f757465723a3a72656769737465723a2072656c6179206860448201527f6173206265656e20626c61636b6c6973746564000000000000000000000000006064820152608401610644565b33600090815260086020526040902054156110175760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a3a72656769737465723a2072656c6179206160448201527f6c726561647920726567697374657265640000000000000000000000000000006064820152608401610644565b60065434101561108f5760405162461bcd60e51b815260206004820152603160248201527f4465706f736974526f757465723a72656769737465723a20696e73756666696360448201527f69656e74207374616b6520616d6f756e740000000000000000000000000000006064820152608401610644565b600654336000908152600a6020526040812080549091906110b1908490612064565b909155506110c290506007336117e1565b503360009081526009602052604090206110dd908383611bb4565b506006543411156111b45760065460009033906110fa903461207c565b604051600081818185875af1925050503d8060008114611136576040519150601f19603f3d011682016040523d82523d6000602084013e61113b565b606091505b50509050806111b25760405162461bcd60e51b815260206004820152602660248201527f4465706f736974526f757465723a72656769737465723a20726566756e64206660448201527f61696c65642e00000000000000000000000000000000000000000000000000006064820152608401610644565b505b336001600160a01b03167fb16283b75da46a2ae7a2aeda9af8df5483014d215c16d77175f2d196255ae7b683836040516111ef929190612022565b60405180910390a2505060018055565b6000546001600160a01b031633146112595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b6001600160a01b0381166112d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610644565b610cf181611526565b6000546001600160a01b031633146113385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610644565b610cf1816001600160a01b03166000908152600b60205260409020805460ff19166001179055565b6060600061136d836117f6565b9392505050565b6001600160a01b0385166000908152600c6020526040812080547f990b6e436815e63cad01cb5170034992c7c2c7fdf40c094dcbcff7d9fa1e87ef913391889188918891876113c2836120c8565b909155506040805160208101979097526001600160a01b0395861690870152939092166060850152608084015260a083015260c082015260e0016040516020818303038152906040528051906020012090506000600d548260405160200161145c9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181529190528051602091820120915061149790829061148890860186611e24565b85602001358660400135611852565b6001600160a01b0316876001600160a01b03161461151d5760405162461bcd60e51b815260206004820152603e60248201527f4465706f736974526f757465723a3a5f7665726966794465706f73697453696760448201527f3a20756e61626c6520746f20766572696679206465706f7369742073696700006064820152608401610644565b50505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015414156115e15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610644565b60026001556001600160a01b0381166000908152600860205260409020546116715760405162461bcd60e51b815260206004820152603a60248201527f4465706f736974526f757465723a3a646572656769737465723a2072656c617960448201527f206973206e6f7420616c726561647920726567697374657265640000000000006064820152608401610644565b6001600160a01b0381166000908152600a6020526040812080549190556116996007836119fb565b506001600160a01b03821660009081526009602052604081206116bb91611c38565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611708576040519150601f19603f3d011682016040523d82523d6000602084013e61170d565b606091505b50509050806117845760405162461bcd60e51b815260206004820152602e60248201527f4465706f736974526f757465723a3a646572656769737465723a20726566756e60448201527f64207374616b65206661696c65640000000000000000000000000000000000006064820152608401610644565b6040513381526001600160a01b038416907f9713c9d5d29d52252ce91902b2eb466a55ebf1ee7e962795abca74391e6445369060200160405180910390a250506001805550565b6000610d10825490565b600061136d8383611a10565b600061136d836001600160a01b038416611a48565b60608160000180548060200260200160405190810160405280929190818152602001828054801561184657602002820191906000526020600020905b815481526020019060010190808311611832575b50505050509050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156118cf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610644565b8360ff16601b14806118e457508360ff16601c145b61193b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610644565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561198f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119f25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610644565b95945050505050565b600061136d836001600160a01b038416611a97565b6000826000018281548110611a3557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000818152600183016020526040812054611a8f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d10565b506000610d10565b60008181526001830160205260408120548015611baa576000611abb60018361207c565b8554909150600090611acf9060019061207c565b9050818114611b50576000866000018281548110611afd57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611b2e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b6f57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d10565b6000915050610d10565b828054611bc090612093565b90600052602060002090601f016020900481019282611be25760008555611c28565b82601f10611bfb5782800160ff19823516178555611c28565b82800160010185558215611c28579182015b82811115611c28578235825591602001919060010190611c0d565b50611c34929150611c6e565b5090565b508054611c4490612093565b6000825580601f10611c54575050565b601f016020900490600052602060002090810190610cf191905b5b80821115611c345760008155600101611c6f565b80356001600160a01b0381168114611c9a57600080fd5b919050565b600060608284031215611cb0578081fd5b50919050565b600060208284031215611cc7578081fd5b61136d82611c83565b60008060008060008060008060006101a08a8c031215611cee578485fd5b611cf78a611c83565b9850611d0560208b01611c83565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a01359250611d378b60e08c01611c9f565b9150611d478b6101408c01611c9f565b90509295985092959850929598565b60008060408385031215611d68578182fd5b611d7183611c83565b946020939093013593505050565b600060208284031215611d90578081fd5b8151801515811461136d578182fd5b60008060208385031215611db1578182fd5b823567ffffffffffffffff80821115611dc8578384fd5b818501915085601f830112611ddb578384fd5b813581811115611de9578485fd5b866020828501011115611dfa578485fd5b60209290920196919550909350505050565b600060208284031215611e1d578081fd5b5035919050565b600060208284031215611e35578081fd5b813560ff8116811461136d578182fd5b60008151808452815b81811015611e6a57602081850181015186830182015201611e4e565b81811115611e7b5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b038086168352808516602084015250606060408301526119f26060830184611e45565b6001600160a01b03831681526000602060408184015281845483600182811c915080831680611eec57607f831692505b858310811415611f0a57634e487b7160e01b87526022600452602487fd5b6040880183905260608801818015611f295760018114611f3a57611f64565b60ff19861682528782019650611f64565b60008b815260209020895b86811015611f5e57815484820152908501908901611f45565b83019750505b50949a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611fb55783516001600160a01b031683529284019291840191600101611f90565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561201557603f19888603018452612003858351611e45565b94509285019290850190600101611fe7565b5092979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061136d6020830184611e45565b60008219821115612077576120776120e3565b500190565b60008282101561208e5761208e6120e3565b500390565b600181811c908216806120a757607f821691505b60208210811415611cb057634e487b7160e01b600052602260045260246000fd5b60006000198214156120dc576120dc6120e3565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122097dce6e406aa95390e46760683c343f91d7bbf86caf2c8f18f4be1589c9a822064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,address,uint256,uint256,uint256,bytes32,uint256,(uint8,bytes32,bytes32),(uint8,bytes32,bytes32))": {
        "details": "deposit funds to Matic. Since this is expected to be called in a meta transaction and `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract and then `depositFor` on this contract to the `depositRecipient` on matic. Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.",
        "params": {
          "depositRecipient": "- the address to receive the deposit on matic",
          "depositSig": "- the EIP712 signature for the deposit",
          "fee": "- the fee to pay for gas.",
          "from": "- the address executing the deposit",
          "maxBlock": "- the maximum block that the deposit can be included in to prevent relayers      from waiting until transaction fee decreases to submit the transaction",
          "nonce": "- a unique random nonce for receiveWithAuthorization (NOT a sequential nonce see      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)",
          "receiveSig": "- the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`",
          "totalValue": "- the amount to deposit",
          "validBefore": "- the deadline for executing the deposit"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 388,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "rootChainManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRootChainManager)1690"
      },
      {
        "astId": 391,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "rootToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20WithEIP3009)1678"
      },
      {
        "astId": 393,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "predicateContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 397,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "collectedFees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 399,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "stakeAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 402,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "_relayers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)1349_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "relayerUrl",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 410,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "relayerStake",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 414,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "blacklisted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 418,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "depositNonces",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 420,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20WithEIP3009)1678": {
        "encoding": "inplace",
        "label": "contract IERC20WithEIP3009",
        "numberOfBytes": "20"
      },
      "t_contract(IRootChainManager)1690": {
        "encoding": "inplace",
        "label": "contract IRootChainManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)1349_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1348,
            "contract": "contracts/DepositRouter.sol:DepositRouter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1048_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1048_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1043,
            "contract": "contracts/DepositRouter.sol:DepositRouter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1047,
            "contract": "contracts/DepositRouter.sol:DepositRouter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}