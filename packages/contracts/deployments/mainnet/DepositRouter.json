{
  "address": "0x60A4A8A77198D798D21d8D0299DDBbb9F24353B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20WithEIP3009",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "contract IRootChainManager",
          "name": "_rootChainManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_predicateContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "relayers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DepositRouter.Sig",
          "name": "receiveSig",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predicateContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootChainManager",
      "outputs": [
        {
          "internalType": "contract IRootChainManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "contract IERC20WithEIP3009",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8ab3527bb90a6c733eef25174e915ef453253a17dda2d8074056ebd43e6d71c",
  "receipt": {
    "to": null,
    "from": "0x1C35E441b21E528Dd8385Fd41d1578bE18E247D3",
    "contractAddress": "0x60A4A8A77198D798D21d8D0299DDBbb9F24353B9",
    "transactionIndex": 159,
    "gasUsed": "936689",
    "logsBloom": "0x
    "blockHash": "0x83d77b0161b4f8b755b679de2c61df3ea1cd489a02827d4497c63f8a207e1e86",
    "transactionHash": "0xf8ab3527bb90a6c733eef25174e915ef453253a17dda2d8074056ebd43e6d71c",
    "logs": [
      {
        "transactionIndex": 159,
        "blockNumber": 12776288,
        "transactionHash": "0xf8ab3527bb90a6c733eef25174e915ef453253a17dda2d8074056ebd43e6d71c",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000060a4a8a77198d798d21d8d0299ddbbb9f24353b9",
          "0x00000000000000000000000040ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 133,
        "blockHash": "0x83d77b0161b4f8b755b679de2c61df3ea1cd489a02827d4497c63f8a207e1e86"
      },
      {
        "transactionIndex": 159,
        "blockNumber": 12776288,
        "transactionHash": "0xf8ab3527bb90a6c733eef25174e915ef453253a17dda2d8074056ebd43e6d71c",
        "address": "0x60A4A8A77198D798D21d8D0299DDBbb9F24353B9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x83d77b0161b4f8b755b679de2c61df3ea1cd489a02827d4497c63f8a207e1e86"
      },
      {
        "transactionIndex": 159,
        "blockNumber": 12776288,
        "transactionHash": "0xf8ab3527bb90a6c733eef25174e915ef453253a17dda2d8074056ebd43e6d71c",
        "address": "0x60A4A8A77198D798D21d8D0299DDBbb9F24353B9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3",
          "0x0000000000000000000000001c35e441b21e528dd8385fd41d1578be18e247d3"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x83d77b0161b4f8b755b679de2c61df3ea1cd489a02827d4497c63f8a207e1e86"
      }
    ],
    "blockNumber": 12776288,
    "cumulativeGasUsed": "8357252",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77",
    "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
    "0x1C35E441b21E528Dd8385Fd41d1578bE18E247D3",
    [
      "0x1C35E441b21E528Dd8385Fd41d1578bE18E247D3"
    ]
  ],
  "solcInputHash": "4384428162cb0ff57a2f0901aba916b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20WithEIP3009\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"contract IRootChainManager\",\"name\":\"_rootChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_predicateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"relayers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct DepositRouter.Sig\",\"name\":\"receiveSig\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predicateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"contract IRootChainManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"contract IERC20WithEIP3009\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,address,uint256,uint256,uint256,bytes32,(uint8,bytes32,bytes32))\":{\"details\":\"deposit funds to Matic. Since this is expected to be called in a meta transaction and `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract and then `depositFor` on this contract to the `depositRecipient` on matic. Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.\",\"params\":{\"depositRecipient\":\"- the address to receive the deposit on matic\",\"fee\":\"- the fee to pay for gas.\",\"from\":\"- the address executing the deposit\",\"nonce\":\"- a unique random nonce for the deposit (NOT a sequential nonce see      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)\",\"receiveSig\":\"- the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`\",\"totalValue\":\"- the amount to deposit\",\"validBefore\":\"- the deadline for executing the deposit\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositRouter.sol\":\"DepositRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/DepositRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IERC20WithEIP3009.sol\\\";\\nimport \\\"./interfaces/IRootChainManager.sol\\\";\\n\\ncontract DepositRouter is AccessControl {\\n    IRootChainManager public rootChainManager;\\n    IERC20WithEIP3009 public rootToken;\\n    address public predicateContract;\\n\\n    // bytes32 public constant DEFAULT_ADMIN_ROLE = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n    // keccak256(\\\"RELAYER_ROLE\\\")\\n    bytes32 public constant RELAYER_ROLE = 0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4;\\n\\n    struct Sig {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    constructor(\\n        IERC20WithEIP3009 _rootToken,\\n        IRootChainManager _rootChainManager,\\n        address _predicateContract,\\n        address admin,\\n        address[] memory relayers\\n    ) {\\n        rootToken = _rootToken;\\n        rootChainManager = _rootChainManager;\\n        predicateContract = _predicateContract;\\n\\n        // hit predicateContract with a max approval\\n        rootToken.approve(predicateContract, type(uint256).max);\\n\\n        // set up roles\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        for (uint256 i = 0; i < relayers.length; ++i) {\\n            _setupRole(RELAYER_ROLE, relayers[i]);\\n        }\\n    }\\n\\n    function claimFees(address to, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rootToken.transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev deposit funds to Matic. Since this is expected to be called in a meta transaction and\\n     * `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract\\n     * and then `depositFor` on this contract to the `depositRecipient` on matic.\\n     * Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.\\n     *\\n     * @param from - the address executing the deposit\\n     * @param depositRecipient - the address to receive the deposit on matic\\n     * @param totalValue - the amount to deposit\\n     * @param fee - the fee to pay for gas.\\n     * @param validBefore - the deadline for executing the deposit\\n     * @param nonce - a unique random nonce for the deposit (NOT a sequential nonce see\\n     *      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)\\n     * @param receiveSig - the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`\\n     */\\n    function deposit(\\n        address from,\\n        address depositRecipient,\\n        uint256 totalValue,\\n        uint256 fee,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        Sig calldata receiveSig\\n    ) external onlyRole(RELAYER_ROLE) {\\n        /**\\n         * receiveWithAuthorization rather than transferWithAuthorization to prevent front-running\\n         * attack where someone takes a transferWithAuthorization signature before the transaction has been mined\\n         * and executes the transfer so that this depositCall would fail and the funds would be stuck in\\n         * this contract.\\n         */\\n        rootToken.receiveWithAuthorization(\\n            from,\\n            address(this),\\n            totalValue,\\n            0,\\n            validBefore,\\n            nonce,\\n            receiveSig.v,\\n            receiveSig.r,\\n            receiveSig.s\\n        );\\n\\n        rootChainManager.depositFor(\\n            depositRecipient,\\n            address(rootToken),\\n            abi.encode(totalValue - fee) // will revert on underflow\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd0c188ce7fc49966e2cf95076ddb9127bbfaddb9734ee0e4985b8da2f710882c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20WithEIP3009.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC20WithEIP3009 {\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x82bbef851c905c5d85744b8b5aed52d7970d3afd136d7c937d970c564bbeefe7\",\"license\":\"MIT\"},\"contracts/interfaces/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IRootChainManager {\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x33ef5dc1d324ef5cbd8a25219eef5e2daa1ee72fc39c6ad5102c4bde24cc21e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010de380380620010de83398101604081905262000034916200026f565b600280546001600160a01b038781166001600160a01b03199283168117909355600180548883169084161790556003805491871691909216811790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b390604401602060405180830381600087803b158015620000b257600080fd5b505af1158015620000c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ed919062000246565b50620000fb60008362000184565b60005b81518110156200017857620001657fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc460001b8383815181106200015157634e487b7160e01b600052603260045260246000fd5b60200260200101516200018460201b60201c565b62000170816200039d565b9050620000fe565b505050505050620003f4565b62000190828262000194565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000190576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001f03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516200024181620003db565b919050565b60006020828403121562000258578081fd5b8151801515811462000268578182fd5b9392505050565b600080600080600060a0868803121562000287578081fd5b85516200029481620003db565b80955050602080870151620002a981620003db565b6040880151909550620002bc81620003db565b6060880151909450620002cf81620003db565b60808801519093506001600160401b0380821115620002ec578384fd5b818901915089601f83011262000300578384fd5b815181811115620003155762000315620003c5565b8060051b604051601f19603f830116810181811085821117156200033d576200033d620003c5565b604052828152858101935084860182860187018e10156200035c578788fd5b8795505b838610156200038957620003748162000234565b85526001959095019493860193860162000360565b508096505050505050509295509295909350565b6000600019821415620003be57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620003f157600080fd5b50565b610cda80620004046000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80635c46ff991161008c578063a217fddf11610066578063a217fddf14610214578063bb1964301461021c578063bd07018d1461022f578063d547741f1461024257600080fd5b80635c46ff99146101a357806391d14854146101b6578063926d7d7f146101ed57600080fd5b8063248a9ca3116100bd578063248a9ca31461014a5780632f2ff15d1461017b57806336568abe1461019057600080fd5b806301ffc9a7146100e457806319860e031461010c5780631f2d006514610137575b600080fd5b6100f76100f2366004610abf565b610255565b60405190151581526020015b60405180910390f35b60035461011f906001600160a01b031681565b6040516001600160a01b039091168152602001610103565b60025461011f906001600160a01b031681565b61016d610158366004610a7c565b60009081526020819052604090206001015490565b604051908152602001610103565b61018e610189366004610a94565b6102be565b005b61018e61019e366004610a94565b6102e9565b61018e6101b1366004610a33565b61037a565b6100f76101c4366004610a94565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61016d7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b61016d600081565b61018e61022a3660046109bf565b61042b565b60015461011f906001600160a01b031681565b61018e610250366004610a94565b6105b4565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806102b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000828152602081905260409020600101546102da81336105da565b6102e48383610658565b505050565b6001600160a01b038116331461036c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61037682826106f6565b5050565b600061038681336105da565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156103ed57600080fd5b505af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610a5c565b50505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461045681336105da565b6002546001600160a01b031663ef55bec68930896000898961047b60208b018b610ae7565b604080516001600160e01b031960e08b901b1681526001600160a01b03988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260ff1660c4830152602086013560e483015285013561010482015261012401600060405180830381600087803b1580156104fc57600080fd5b505af1158015610510573d6000803e3d6000fd5b50506001546002546001600160a01b03918216935063e3dec8fb92508a9116610539898b610c34565b60405160200161054b91815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161057893929190610bb5565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b505050505050505050505050565b6000828152602081905260409020600101546105d081336105da565b6102e483836106f6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661037657610616816001600160a01b03166014610775565b610621836020610775565b604051602001610632929190610b34565b60408051601f198184030181529082905262461bcd60e51b825261036391600401610bea565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610376576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106b23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610376576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610784836002610c15565b61078f906002610bfd565b67ffffffffffffffff8111156107b557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107df576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061082457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061087d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006108a1846002610c15565b6108ac906001610bfd565b90505b600181111561094d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106108fb57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061091f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361094681610c77565b90506108af565b50831561099c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610363565b9392505050565b80356001600160a01b03811681146109ba57600080fd5b919050565b60008060008060008060008789036101208112156109db578384fd5b6109e4896109a3565b97506109f260208a016109a3565b9650604089013595506060808a0135955060808a0135945060a08a0135935060bf1982011215610a20578182fd5b5060c08801905092959891949750929550565b60008060408385031215610a45578182fd5b610a4e836109a3565b946020939093013593505050565b600060208284031215610a6d578081fd5b8151801515811461099c578182fd5b600060208284031215610a8d578081fd5b5035919050565b60008060408385031215610aa6578182fd5b82359150610ab6602084016109a3565b90509250929050565b600060208284031215610ad0578081fd5b81356001600160e01b03198116811461099c578182fd5b600060208284031215610af8578081fd5b813560ff8116811461099c578182fd5b60008151808452610b20816020860160208601610c4b565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b6c816017850160208801610c4b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610ba9816028840160208801610c4b565b01602801949350505050565b60006001600160a01b03808616835280851660208401525060606040830152610be16060830184610b08565b95945050505050565b60208152600061099c6020830184610b08565b60008219821115610c1057610c10610c8e565b500190565b6000816000190483118215151615610c2f57610c2f610c8e565b500290565b600082821015610c4657610c46610c8e565b500390565b60005b83811015610c66578181015183820152602001610c4e565b838111156104255750506000910152565b600081610c8657610c86610c8e565b506000190190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b75820e1283c82fcf1d674d7a15d62e660d2a79904992f69c585208153f6453564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80635c46ff991161008c578063a217fddf11610066578063a217fddf14610214578063bb1964301461021c578063bd07018d1461022f578063d547741f1461024257600080fd5b80635c46ff99146101a357806391d14854146101b6578063926d7d7f146101ed57600080fd5b8063248a9ca3116100bd578063248a9ca31461014a5780632f2ff15d1461017b57806336568abe1461019057600080fd5b806301ffc9a7146100e457806319860e031461010c5780631f2d006514610137575b600080fd5b6100f76100f2366004610abf565b610255565b60405190151581526020015b60405180910390f35b60035461011f906001600160a01b031681565b6040516001600160a01b039091168152602001610103565b60025461011f906001600160a01b031681565b61016d610158366004610a7c565b60009081526020819052604090206001015490565b604051908152602001610103565b61018e610189366004610a94565b6102be565b005b61018e61019e366004610a94565b6102e9565b61018e6101b1366004610a33565b61037a565b6100f76101c4366004610a94565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61016d7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b61016d600081565b61018e61022a3660046109bf565b61042b565b60015461011f906001600160a01b031681565b61018e610250366004610a94565b6105b4565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806102b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000828152602081905260409020600101546102da81336105da565b6102e48383610658565b505050565b6001600160a01b038116331461036c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61037682826106f6565b5050565b600061038681336105da565b6002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156103ed57600080fd5b505af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610a5c565b50505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461045681336105da565b6002546001600160a01b031663ef55bec68930896000898961047b60208b018b610ae7565b604080516001600160e01b031960e08b901b1681526001600160a01b03988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260ff1660c4830152602086013560e483015285013561010482015261012401600060405180830381600087803b1580156104fc57600080fd5b505af1158015610510573d6000803e3d6000fd5b50506001546002546001600160a01b03918216935063e3dec8fb92508a9116610539898b610c34565b60405160200161054b91815260200190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161057893929190610bb5565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b505050505050505050505050565b6000828152602081905260409020600101546105d081336105da565b6102e483836106f6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661037657610616816001600160a01b03166014610775565b610621836020610775565b604051602001610632929190610b34565b60408051601f198184030181529082905262461bcd60e51b825261036391600401610bea565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610376576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106b23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610376576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610784836002610c15565b61078f906002610bfd565b67ffffffffffffffff8111156107b557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107df576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061082457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061087d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006108a1846002610c15565b6108ac906001610bfd565b90505b600181111561094d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106108fb57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061091f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361094681610c77565b90506108af565b50831561099c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610363565b9392505050565b80356001600160a01b03811681146109ba57600080fd5b919050565b60008060008060008060008789036101208112156109db578384fd5b6109e4896109a3565b97506109f260208a016109a3565b9650604089013595506060808a0135955060808a0135945060a08a0135935060bf1982011215610a20578182fd5b5060c08801905092959891949750929550565b60008060408385031215610a45578182fd5b610a4e836109a3565b946020939093013593505050565b600060208284031215610a6d578081fd5b8151801515811461099c578182fd5b600060208284031215610a8d578081fd5b5035919050565b60008060408385031215610aa6578182fd5b82359150610ab6602084016109a3565b90509250929050565b600060208284031215610ad0578081fd5b81356001600160e01b03198116811461099c578182fd5b600060208284031215610af8578081fd5b813560ff8116811461099c578182fd5b60008151808452610b20816020860160208601610c4b565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b6c816017850160208801610c4b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610ba9816028840160208801610c4b565b01602801949350505050565b60006001600160a01b03808616835280851660208401525060606040830152610be16060830184610b08565b95945050505050565b60208152600061099c6020830184610b08565b60008219821115610c1057610c10610c8e565b500190565b6000816000190483118215151615610c2f57610c2f610c8e565b500290565b600082821015610c4657610c46610c8e565b500390565b60005b83811015610c66578181015183820152602001610c4e565b838111156104255750506000910152565b600081610c8657610c86610c8e565b506000190190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b75820e1283c82fcf1d674d7a15d62e660d2a79904992f69c585208153f6453564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,address,uint256,uint256,uint256,bytes32,(uint8,bytes32,bytes32))": {
        "details": "deposit funds to Matic. Since this is expected to be called in a meta transaction and `IRootChainManager.depositFor` relies on msg.sender, we transfer funds to this contract and then `depositFor` on this contract to the `depositRecipient` on matic. Note: RootChainManager has an `executeMetaTransaction` function but this method to deposit uses less gas.",
        "params": {
          "depositRecipient": "- the address to receive the deposit on matic",
          "fee": "- the fee to pay for gas.",
          "from": "- the address executing the deposit",
          "nonce": "- a unique random nonce for the deposit (NOT a sequential nonce see      https://eips.ethereum.org/EIPS/eip-3009#unique-random-nonce-instead-of-sequential-nonce)",
          "receiveSig": "- the EIP712 signature for `IERC20WithEIP3009.receiveWithAuthorization`",
          "totalValue": "- the amount to deposit",
          "validBefore": "- the deadline for executing the deposit"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 637,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "rootChainManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRootChainManager)849"
      },
      {
        "astId": 640,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "rootToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20WithEIP3009)837"
      },
      {
        "astId": 642,
        "contract": "contracts/DepositRouter.sol:DepositRouter",
        "label": "predicateContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20WithEIP3009)837": {
        "encoding": "inplace",
        "label": "contract IERC20WithEIP3009",
        "numberOfBytes": "20"
      },
      "t_contract(IRootChainManager)849": {
        "encoding": "inplace",
        "label": "contract IRootChainManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/DepositRouter.sol:DepositRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/DepositRouter.sol:DepositRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}